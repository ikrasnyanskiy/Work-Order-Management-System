@model List<WorkOrderManagementSystem.Controllers.ReportServiceItemPopularity>

@{
    ViewBag.Title = "Report: Service Popularity";
}

<h2>Report: Service Popularity</h2>
<h3>Sort</h3>
<table>
    <tr>
        <td><button type="button" class="btn btn-primary" onclick="sortTable(0, 1, 0)">Description - Asc</button> &nbsp;&nbsp;&nbsp;</td>
        <td><button type="button" class="btn btn-primary" onclick="sortTable(0, 0, 1)">Price - Asc</button> &nbsp;&nbsp;&nbsp;</td>
        <td><button type="button" class="btn btn-primary" onclick="sortTable(0, 0, 2)">Occurences - Asc</button> &nbsp;&nbsp;&nbsp;</td>
        <td><button type="button" class="btn btn-primary" onclick="sortTable(0, 0, 3)">Revenue - Asc</button> &nbsp;&nbsp;&nbsp;</td>
    </tr>
    <tr>
        <td><button type="button" class="btn btn-primary" onclick="sortTable(1, 1, 0)">Description - Desc</button> &nbsp;&nbsp;&nbsp;</td>
        <td><button type="button" class="btn btn-primary" onclick="sortTable(1, 0, 1)">Price - Desc</button> &nbsp;&nbsp;&nbsp;</td>
        <td><button type="button" class="btn btn-primary" onclick="sortTable(1, 0, 2)">Occurences - Desc</button> &nbsp;&nbsp;&nbsp;</td>
        <td><button type="button" class="btn btn-primary" onclick="sortTable(1, 0, 3)">Revenue - Desc</button> &nbsp;&nbsp;&nbsp;</td>
    </tr>
</table>

<br />

<table id="reportTable" class="table">
    <tr>
        <th>
            Service Item Description
        </th>
        <th>
            Price
        </th>
        <th>
            Total Occurences
        </th>
        <th>
            Revenue Generated ($)
        </th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.ServiceItemDesc)
        </td>
        <td id="SIPrice">
            @Html.DisplayFor(modelItem => item.ServiceItemPrice)
        </td>
        <td id="TotalOccurences">
            @Html.DisplayFor(modelItem => item.ServiceItemOccurences)
        </td>
        <td id="RevenueGen">
           @Html.DisplayFor(modelItem => item.RevenueGenerated)
        </td>
        @*<td>
            @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
            @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
            @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
        </td>*@
    </tr>
}

</table>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    <script>
        // Parameters: 
        // asc - 0 or 1 = true or false
        // isNum - 0 or 1 = true or false
        // tdIdx - column you want to sort the rows by (eg. by name, by price, etc.)
        function sortTable(asc, isNum, tdIdx) {
            var table, rows, switching, i, x, y, shouldSwitch;
            table = document.getElementById("reportTable");
            switching = true;
            /*Make a loop that will continue until
            no switching has been done:*/
            while (switching) {
                //start by saying: no switching is done:
                switching = false;
                rows = table.getElementsByTagName("TR");
                /*Loop through all table rows (except the
                first, which contains table headers):*/
                for (i = 1; i < (rows.length - 1) ; i++) {
                    //start by saying there should be no switching:
                    shouldSwitch = false;
                    /*Get the two elements you want to compare,
                    one from current row and one from the next:*/
                    x = rows[i].getElementsByTagName("TD")[tdIdx];
                    y = rows[i + 1].getElementsByTagName("TD")[tdIdx];
                    //check if the two rows should switch place:
                    if (asc === 0) {
                        if (isNum === 0) {
                            if (parseInt(x.innerHTML) > parseInt(y.innerHTML)) {
                                //if so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        } else {
                            if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                                //if so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        }
                    } else {
                        if (isNum === 0) {
                            if (parseInt(x.innerHTML) < parseInt(y.innerHTML)) {
                                //if so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        } else {
                            if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                                //if so, mark as a switch and break the loop:
                                shouldSwitch = true;
                                break;
                            }
                        }
                    } 
                }
                if (shouldSwitch) {
                    /*If a switch has been marked, make the switch
                    and mark that a switch has been done:*/
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                }
            }
        }
    </script>
}
